#!/usr/bin/env python
# coding: utf-8

# ＊理解binarary search tree過程參考資料：
# 1. http://alrightchiu.github.io/SecondRound/binary-search-tree-introjian-jie.html
# 
# 2. 演算法圖鑑 by石田保輝 ＆ 宮崎修一

# # 流程圖：
# 參考資料：https://emn178.pixnet.net/blog/post/94574434
# https://blog.csdn.net/John_xyz/article/details/79622219

# #**二元搜尋樹定義:**
# 定義除了繼承二元樹的定義外，二元搜索樹本身也有額外的定義，但可能會看到幾種不同的說法，而較多數人使用的定義如下：
# 
# 1. 左子樹不為空，則左子樹的所有節點的鍵值(Key)小於根節點的鍵值。
# 2. 右子樹不為空，則右子樹的所有節點的鍵值(Key)大於根節點的鍵值。
# 3. 左右子樹也都是二元搜索樹。
# 4. 節點不會有重複的鍵值。
# 
# 這個定義是樹中的節點都具有Key-value pair情況，有時候可能會其他變化：
# 
# 1. 沒有鍵值，而用值(Value)來比較。
# 2. 允許重複的資料，此時會出現等於的情況，則將定義1.改成小於等於或者定義2.改成大   
#    於等於。
# 
# 
# ##**新增：**
# 
# 向一個二叉搜索樹b中插入一個節點s的算法，過程為：
# 
# 1. 若b是空樹，則將s所指結點作為根節點插入，否則：
# 2. 若s.val等於b的根節點的數據域之值，則返回，否則：
# 3. 若s.val小於b的根節點的數據域之值，則把s所指節點插入到左子樹中，否則：
#     把s所指節點插入到右子樹中（新插入節點總是葉子節點）
# 
# ##**搜尋：**
# 
# 在二叉搜索樹b中查找x的過程為：
# 
# 1. 若b是空樹，則搜索失敗，否則：
# 2. 若x等於b的根節點的數據域之值，則查找成功；否則：
# 3. 若x小於b的根節點的數據域之值，則遞歸搜索左子樹；否則:
#    遞歸查找右子樹
# 
# ##**刪除：**
# 
# 刪除的操作較為複雜，作為資料集合時，刪除不能直接把節點與其子孫全部移除，而需要進行一些移動的操作讓樹保持二元搜索樹的定義，基本上有三種情況需要考慮：
# 
# 1. 沒有子節點時，可以直接移除。
# 2. 有一個子節點時，將子節點取代被移除的節點的位置。
# 3. 有兩個子節點時，將樹作中序(in-order)排列後，
#    可以選擇被移除節點的前驅(predecessor)節點或後繼(successor)節點來替換；
#    或者白話一點的說法，可以從左子樹找到最大值或右子樹找到最小值的節點，
#    來取代被移除的節點位置，並同時將找到的節點之子節點取代自身的位置。

# # 原理：

# BST，二元搜尋樹，試資料結構的一種，使用圖形的樹狀結構。
# BST會將數據存入各個節點，並作為一種提供搜尋功能(binart search)的數據結構來使用。不管是搜尋資料或尋找恰當的追加位置，都只需要跟所在位置的數據比較大小，
# 就可以確定該往左或往右。

# # 學習歷程：

# ***我寫程式碼時候的順序： 新增 -> 搜尋 -> 刪除 -> 修改***
# 
# **所以我也按照這幾個來寫一下我的學習過程，以及我在這之間所碰到的難題：**
# 
# 1. 新增：
#    新增的這部分我花了兩小時多才寫出來
#    
#     **但最後有個地方我有點不清楚：**
#     就是在投影片上(HW3程式碼那頁)對於insert的說明，「碰到一樣的數字時就擺左邊，       但node有多個位置可以擺放時，需放在離root最近的位置」好像有點點矛盾，但可能是     我暫時想不到除了碰到一樣的數字之外node還有多個位置可掰放的例子，所以這部份 
#     我就先暫時寫到這邊。
#     
#     
# 2. 搜尋：
#     搜尋的部分我覺得比較容易一些，因為搜尋比對的過程在我腦袋裡比較有清楚的邏輯，     所以一小時多左右就寫出來了～
#     但這之間if迴圈的部分我是調整了比較久，才找出目前的寫法！
#     
# 3. 刪除：
#     這一部分比我之前在寫LeetCode707的LinkedList還要更複雜了許多，因為多了left跟       right要考慮，所以我還在研究要怎麼寫！這部分跟後續修改的部分會再補交！
# 
# 4. 修改：
# 
# 

# # 目前學習心得總結：

# 說真的我到前幾個禮拜才真正了解到，演算法這門課真的是非常需要花費時間跟精力的，到前兩個禮拜我才意識到：天阿！！！我之前到底是流了多少技術債啊！ 一開始也一直煩惱我的程式基礎真的是爛到一個哭，加上我這科文科腦，很多邏輯的地方都超卡，所以寫跟想的時間都要花上比別人多大概兩三倍的時間...真的超級挫折，加上我又是大三才來雙主修，為了想達成我的目標（在大四前可以如期畢業），就對自己很狠的把巨資從大一到大四的課全都一起修了，但這也讓我壓力超大，因為寫程式真的需要花上超級久的時間才能寫出一點點，這真的讓我一度想放棄，家人朋友也勸我為什麼要這樣逼自己，讓我覺得，我是不是該退選，延到明年，但我又覺得逃避也不是辦法，更不是我的作風，我寧願盡力去努力了而失敗，也不要半途而廢！所以我還是留在這堂課到現在... 
# 
# 像我常常就花了六到七小時不眠不休，不喝水不上廁所，才千辛萬苦解出一題，所以這也讓我意識到時間分配的重要性。 但無論如何，雖然這次也目前這題也只有寫出一半，不過當解出每一個小小的地方的時候，都會覺得成就感暴增（雖然寫出來的東西可能ㄌㄡˋㄌㄡˋㄉㄥˊ）但就會覺得好像人生向前跨了一步XDD 這或許就跟老師上課講的一樣，寫程式其實就是在訓練我們獨立思考以及解決問題的能力！
# 
# 總而言之，雖然晚了非常非常多才意識到技術債問題嚴重性，但我還是覺得至少自己至少有盡力擠出時間，在跪著爬著前進...！
